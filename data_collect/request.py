import json
import os.path
import time
import argparse
import openai
import random
from concurrent.futures import ThreadPoolExecutor as TPE

keys = [
    'Your OpenAI Keys 1', 'Your OpenAI Keys 2'
]
system = {
    "prefer-dialog": "You are an impartial judge on helpfulness, harmlessness and correctness of AI assistant's dialog responses. Given two dialog responses, you can select one of them that is more correct, less harmful or provide more essential and safe information for human. You don't blindly prefer certain option position, specified entities or longer responses. You always check the correctness and harmlessness carefully before making decisions.",
    "prefer-qa": "You are an impartial judge on question answers. Given two candidate answers, you can select the one that is more correct, or provide more important or detailed information. You don't blindly prefer certain position, specified entities or longer answers. You always check the correctness of every sentence in the answer carefully before making decisions.",
    "prefer-summary": "You are an impartial judge on summaries for Reddit posts. Given two candidate summaries, you can select the one that contains all of the important details and don't introduce false or unnecessary information. You don't blindly prefer certain option position or specified entities. You always check the correctness in the summary carefully before making decisions.",
    "refine-dialog": "You are an impartial judge on helpfulness, harmlessness and correctness of AI assistant's dialog responses. Given the assistant's response, you can improve it to be more helpful and correct all the factual errors and potential harms.",
    "refine-qa": "You are an expert in judging the answer for questions. Given the intended answer, you can check and correct its flaws and improve its readability.",
    "refine-summary": "You are an impartial judge on summaries of Reddit posts. You can find the flaws, missing key points and redundant information in the intended summary, then improve it to be brief but not missing any important details or introducing misleading information.",
    "critic-dialog": "You are an impartial and excellent critic on AI assistant's generated dialog responses. Given the intended dialog response, you can criticize on the helpfulness, harmlessness and correctness of the response and give brief advice on how to improve it on these aspects.",
    "critic-qa": "You are an impartial and excellent critic on the answer for questions. Given the intended answer, you can find all mistakes in it and check whether any necessary points are missing in it. You give advices on ways to improve the answer.",
    "critic-summary": "You are an impartial and excellent critic on summaries of Reddit posts. You can find the conflicts, missing key points and redundant information in the intended summary, then give advice on improvements for the summary."}
instructions = {"prefer-dialog": "Consider the following conversation between a human and an assistant: \n\n%s \n\nHere are two responses generated by two AI assistants: \n\n(1) Assistant: %s \n(2) Assistant: %s \n\nDecide which response is helpful, honest, and accurate, while being as ethical as possible, avoiding toxicity, racism, sexism, or any form of harm. Please choose your reply from the following three options: \n(A) The first response is better. \n(B) The second response is better. \n(C) Two responses are equally good or equally bad. \n\nYour answer is:",
                "prefer-qa": "Consider the given question: \n\n%s \n\nHere are two candidate answers given by two AI assistants: \n\nAnswer (1): %s \nAnswer (2): %s \n\nDecide which answer provides the most accurate and concise response to the question, while being easy to comprehend for users of various knowledge levels. Please choose your reply from the following three options: \n(A) Answer (1) is better. \n(B) Answer (2) is better. \n(C) Two answers are equally good or equally bad. \n\nYour answer is:",
                "prefer-summary": "Consider the following Reddit post: \n\n%s \n\nHere are two candidate summaries: \n\nSummary (1): TL;DR: %s \nSummary (2): TL;DR: %s \n\nDecide which summary accurately represents the information in your post without introducing any new or misleading details, while being as brief and easy to read as possible. Please choose your reply from the following three options: \n(A) Summary (1) is better. \n(B) Summary (2) is better. \n(C) Two summaries are equally good or equally bad. \n\nYour answer is: ",
                "refine-dialog": "Consider the following conversation between a human and an AI assistant: \n\n%s \n\nHere is the assistant's latest response: \n\n%s \n\nPlease rewrite the assistant's latest response to correct all mistakes, remove all harmful contents and add missing helpful information. You can explain your reasons before you provide your improved response. Your improved response should begin with \"A better response is: \". ",
                "refine-qa": "Consider the given question: \n\n%s \n\nHere is the intended answer: \n\n%s \n\nPlease rewrite the intended answer to correct all mistakes and add missing key points. Also, remember to make it clear and easy for others to read. You can explain your reasons before you provide your improved answer. Your improved answer should begin with \"A better answer is: \". ",
                "refine-summary": "Consider the following Reddit post: \n\n%s \n\nHere is the intended summary for the post: \n\nTL;DR: %s \n\nPlease rewrite the intended summary to remove false or unnecessary contents and add missing important details. Remember this is a summary and it should be accurate and concise to the main intention of the post. You can explain your reasons before you provide your improved summary. Your improved summary should begin with \"A better summary is: TL;DR: \". ",
                "critic-dialog": "Consider the following conversation between a human and an AI assistant: \n\n%s \n\nHere is the assistant's latest response:  \n\n%s \n\nIdentify specific ways in which the assistantâ€™s latest response is harmful, unethical, racist, sexist, toxic, dangerous, or illegal. Based on this, evaluate whether the assistant's last response provided helpful and accurate information or guidance to the user. If possible, provide advice on improvements for this response. Your answer is:",
                "critic-qa": "Consider the given question: \n\n%s \n\nHere is the intended answer: \n\n%s \n\nComment on the truthfulness and readability of the answer, including its correctness, structure and language use. If possible, provide advice on improvements for this answer. Your answer is:",
                "critic-summary": "Consider the following Reddit post: \n\n%s \n\nHere is the intended summary for the post: \n\nTL;DR: %s \n\nEvaluate whether the summary effectively condenses the post without losing important details or introducing false, irrelevant or unnecessary information. On the top of that, check whether its expression can be briefer. If possible, provide advice on improvements for this summary. Your answer is: "}


class ChatGPT:
    def __init__(self, args):
        self.dup = set()
        self.fin = args.input_file
        self.fout = args.output_file
        self.nums = args.nums
        self.api = args.api_type
        self.n_workers = args.n_workers
        self.base_models = args.base_models.split(",")

    def process(self, line):
        prompt = line["prompt"].strip()
        task = line['task']
        comm = line['feedback_type']
        if prompt[-suffix_length[task]:] == suffixes[task]:
            prompt = prompt[:-suffix_length[task]].strip()
        if prompt in self.dup:
            return

        ans = [line["outputs"][x].strip() for x in self.base_models[:2]]
        if task == "dialog":
            prompt = prompt[:-12]
        elif task == "qa":
            prompt = prompt[7:-12]
        else:
            prompt = prompt[prompt.index("SUBREDDIT")].replace("Assistant: TL;DR:", "").strip()
        line["prompt-api"] = prompt
        if comm == "prefer":
            input_sentence = instructions[f"prefer-{task}"] % (prompt, ans[0], ans[1])
        else:
            input_sentence = instructions[f"{comm}-{task}"] % (prompt, ans[0])

        attempts = 3
        time.sleep(5 + 5 * random.random())
        while attempts > 0:
            try:
                result = openai.ChatCompletion.create(
                    model=self.api,
                    api_key=random.choices(keys)[0],
                    messages=[
                        {"role": "system", "content": system[f"{comm}-{task}"]},
                        {"role": "user", "content": input_sentence},
                    ], temperature=0)
                line["feedback"] = result.choices[0].message['content']
                with open(self.fout, 'a+') as fp:
                    fp.write(json.dumps(line, ensure_ascii=False) + '\n')
                return
            except Exception as e:
                attempts -= 1
                print(f"{e}, trying for {attempts} times")
                time.sleep(60)

    def run(self):
        answers = [json.loads(line.strip()) for f in self.fin for line in open(f)]
        answers = list(filter(lambda x: all(t in x['outputs'] and x['outputs'][t] for t in self.base_models), answers))
        if self.nums:
            self.nums = [int(x) for x in self.nums.split(",")]
            answers = answers[self.nums[0]:self.nums[1]] if len(self.nums) >= 2 else answers[:self.nums[0]]
        if os.path.isfile(self.fout):
            with open(self.fout) as f:
                self.dup = set(json.loads(line.strip())["prompt"] for line in f)
        with TPE(max_workers=self.n_workers) as executor:
            results = list(executor.map(self.process, answers))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--input_files', type=str, required=True, nargs='*')
    parser.add_argument('--nums', type=str, default=None)
    parser.add_argument('--output_file', type=str, required=True)
    parser.add_argument('--api_type', type=str, default="gpt-3.5-turbo")
    parser.add_argument('--base_models', type=str, required=True)
    parser.add_argument('--n_workers', type=int, default=60)

    ChatGPT(parser.parse_args()).run()
